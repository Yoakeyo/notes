Django 框架的结构
	基于 MVC 架构
		model		模型
		view		视图
		controller 	控制器
	
	MVT 模式
		model		模型
		template	模板
		view		视图
		
项目
	django-start project 项目名		#创建项目
	模板文件
		manage.py
			项目运行的入口文件
			
		__init__.py
			空文件
			
		settings.py
			整个项目的配置文件
			
		urls.py
			URL配置文件
			
		wsgi.py
			项目与 WEB 服务器对接的入口文件
		
应用
	django 通过应用的方式管理整个网站项目
		一个项目中包含多个子模块，例如用户模块，商品模块等，这些子模块被称作一个应用(app)
	python manage.py startapp 应用名		#创建一个应用
	需要在 settings 中配置
		在 INSTALLED_APPS 中添加应用名
	模板文件:
		__init__.py
			空文件
			
		tests.py
			用于开发测试，可在此编写测试代码
			
		view.py
			视图文件
			
		model.py
			模型文件
			
		admin.py
			管理员相关
			
		migrations包
			模型移植相关
			
开发服务器
	python manage.py runserver ip:端口(可以不指定)	#运行开发服务器
	
数据库
	ORM(对象关系映射) 库
		Django 提供的一套针对数据库操作的代码库
		通过该代码库可以直接生成 SQL 语句，无需开发人员自己处理
		Django 中已内置
	配置
		在settings设置 DATABASES
		在__init__.py 中添加
			import pymysql
			pymysql.install_as_MySQLdb()	#当成mysqldb一样使用
	模型迁移命令
		python manage.py makemigrations
	查看该文件对应的 SQL 语句
		python manage.py sqlmigrate app名 0001
	执行迁移
		python manage.py migrate
	插入数据:
		from app名.models import *
		name = app名
		name.数据列名 = '数据'
		name.save()
	查询数据:
		get方法:		#查询单个数据
		name = app名.objects.get(列名 = '数据')
		all方法:		#查询所有数据
		name = app名.objects.all()
			app名.objects.all()[1:3]	#分割数据,查询第1-3条数据
		filter方法	#根据条件过滤数据
	更新操作:
		如果数据已经有了，再执行save便会更新数据
	删除操作:
		delete


创建视图
