算数运算符
	+	加				10 + 20 = 30
	-	减				1 - 1 = 0
	*	乘				2 * 2 = 4
	/	除				10 / 2 = 5
	%	取余值(取模)		9 % 2 = 1		返回除法的余数
	
		先乘除，后加减，有小括号先算小括号里的
	特殊情况:
		浮点数的最高精度是17位小数
		var result = 0.1 + 0.2;		结果不是0.3,而是:0.300000000000000004
		console.log(0.07 * 100);	结果不是7，而是7.00000000000000001
		两个浮点数不能直接进行判断是否相等
	
	
递增和递减运算符
	++	递增
	--	递减
	前置递增(递减)运算符		放在变量前	
		++num 就是 num = num +1			
		先自加，后返回值					
	后置递增(递减)运算符		放在变量后	
		num++ 就是 num = num +1			
		先返回值，后自加
	前置和后置如果单独使用，效果是一样的
	
	
比较运算符
	<		小于号
	>		大于号
	<=		小于或等于
	>=		大于或等于
	==		等号(会转型)
	!=		不等号
	===		全等(要求值和数据类型都一直)
	!==		全不等
	判断结果返回一个布尔值 true 或 false


逻辑运算符
	也称为布尔运算符
	&&		逻辑与		and		true && false
	||		逻辑或		or		true || true
	!		逻辑非		not		!true
	短路运算(逻辑中断)
		如果左边的表达式值可以确定，后面的就不会再运算了
		逻辑与:
			语法: 表达式1 && 表达式2
				如果表达式1的值为真，则返回表达式2
				如果表达式1的值为假，则返回表达式1
		逻辑或:
			语法: 表达式1 || 表达式2
			如果表达式1结果为真，则返回表达式1
			如果表达式1结果为加，则返回表达式2
		
赋值运算符
	=				直接赋值				var name = '名字';
	+=、 -=			加、减一个数后再赋值	var	age = 10; age += 5;  // 15
	*=、 /=、 %=		乘、除、取模后再赋值	var age = 2; age *= 5;   // 10


运算符优先级
	优先级		运算符			顺序
	  1			小括号			()
	  2			一元运算符		++ -- !
	  3			算数运算符		先 * / % 后 + -
	  4			关系运算符		> >= < <=
	  5			相等运算符		== != === !==
	  6			逻辑运算符		先 && 后 ||
	  7			赋值运算符		=
	  8			逗号运算符		,

三元运算符
	语法:
		表达式1 ? 表达式2 : 表达式3
			如果表达式1为true，则返回表达式2
			如果表达式1为false，则返回表达式3