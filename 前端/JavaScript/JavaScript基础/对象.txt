对象
	是一组无序的相关属性和方法的集合，所有事物都是对象，例如字符串、数组、函数等
	由属性和方法组成
		属性:
			事物的特征，在对象中用属性来表示(常用名词)
		方法:
			事物的行为，在对象中用方法来表示(常用动词)
	对象分为3种:
		自定义对象
		内置对象
			JavaScript中自带的一些对象
		浏览器对象
创建对象
	利用字面量创建对象
		对象字面量:
		就是 {} 里面包含了表达这个具体事物
		{} 里面采取了键值对的表现形式
			键:相当于属性名
			值:相当于属性值,可以是任意类型的值(数字类型、字符串类型、布尔类型、函数类型等)
		例：
			var dog = {
				name : 'cat',
				age : 4,
				bark : function() {
				    console.log('汪汪汪');
				}
			}

			
	利用 new Object 创建对象
		语法:
			var 对象名 = new Object();
			obj.uname = '张三';
			obj.age = 15;
		利用 =(等号) 赋值的方法，添加对象的属性和方法
		每个属性个方法之间用 ; 结束
		
	利用构造函数创建对象
		封装对象的函数称为对象函数
		语法:
			function 构造函数名() {
				this.属性 = 值;
				this.方法 = function() {}
			}
			new 构造函数名();	// 调用函数返回的是一个对象
		构造函数不需要 return 就可以返回结果
		构造函数和对象的区别:
			构造函数:抽象了对象的公共部分，封装到了函数里面，他泛指某一大类(class)
			创建对象:特指某一个，通过 new 关键词创建对象的过程我们也称为对象的实例化
		new 的执行过程:
			1.new 构造函数可以在内存中创建一个空的对象
			2.this 就会只想刚才那个创建的空对象
			3.执行这个构造函数里面的代码，给这个空对象创建属性和方法
			4.返回这个对象(所以不需要 return)
调用对象
	对象属性的调用:
		对象名.属性名
		对象名['属性名']
	对象方法的调用:
		对象名.方法名()
	        必须添加小括号

遍历对象
	语法:
		for (变量 in 对象) {
			//执行体
		}
		例:
			for (var k in obj) {
				console.log(k);		//得到属性名
				console.log(obj[k])	//得到属性值
			}

内置对象
	Math
		具有数学常数和函数的属性和方法
		Math.PI					// 圆周率
		Math.floor()			// 向下取整
		Math.ceil()				// 向上取整
		Math.round()			// 就近取整(四舍五入) 但是 .5 比较特殊，往大的取
		Math.abs()				// 绝对值
		Math.max()/Math.min()	// 最大/最小值
		Math.random()			// 返回一个随机数
			获取两个数之间的随机整数，并且包括这两个数
			function getRandom(min,max) {
				return Math.floor(Math.random() * (max - min +1)) + min;
			}
	Date
		日期对象
		是一个构造函数，必须用 new 来调用创建
		返回当前(系统)时间:
			var now = new Date();
			console.log(now)
		返回参数里面的时间:
			数字型
				var now = new Date(2012,12,21);
					月份会比实际数字大1
			字符串型(常用)
				var now = new Date('2012-12-21');
				var now = new Date('2012/12/21');
		日期格式化 
			方法名			说明
			getFullYear()	获取当年
			getMonth()		获取当月(0-11)
			getDate()		获取当天日期
			getDay()		获取星期几(周日0-周六6)
			getHours()		获取当前小时
			getMinutes()	获取当前分钟
			getSeconds()	获取当前秒钟
		获取 Date 总毫秒数(时间戳)	//距离1970.1.1过了多少毫秒
			通过 valueOf() getTime()
				var date = new Date();
				console.log(date.valueOf());
				console.log(date.getTime());
			简单写法(最常用写法)
				var date = +new Date();	//返回的就是总毫秒数
				console.log(date);
			H5 新增的写法
				console.log(Date.now());
				
字符串对象
	基本包装类型
		把简单数据类型包装成了复杂数据类型
		var str = "tom"
			1)创建一个临时变量,构造函数为复杂类型
			var temp = new String('andy')
			2)把临时变量的值给str
			str = temp;
			3)销毁临时变量
			temp = null;
		使得基本数据类型具有属性和方法
	字符串的不可变性
		字符串里面的值看上去可以改变，但实际上是指针指向了新的地址，内存中开辟了一个新的内存空间
	根据字符返回位置
		indexOf('要查找的字符',开始的位置)	//返回指定内容在字符串中的内容，如果找不到则返回-1
		lastIndexOf()						//从后往前找
	根据位置返回字符(重点)
		charAt(index)		返回指定位置的字符		str.charAt(index字符串索引号)
		charCodeAt(index)	获取指定位置的ASCII码		str,charCodeAt(index索引号)，判断用户按下了哪个键
		str[index]			获取指定位置的字符		HTML5
	字符串操作方法(重点)
		concat(str1,str2...)		用于连接两个或多个字符串，等效于 +
		substr(start,length)		从 start 开始，取 length 个数
		slice(start,end)			从 start 开始，截取到 end 位置(end取不到)
		substring(start,end)		与 slice 相似，但不接受负值
		replace('str','newStr')		将字符串替换为新的字符串
		split('分隔符')				将字符串转换为数组
			split('&')		// a&b&c --> ['a','b','c']