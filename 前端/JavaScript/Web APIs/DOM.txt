DOM(Document Object Model / 文档对象模型)
	是 W3C 组织推荐的处理可扩展标记语言(HTML/XML)的标准编程接口
	通过 DOM 接口可以改变网页的内容、结构和样式


DOM 树
	文档：一个页面就是一个文档，DOM 中使用 document 表示
	元素：页面中的所有标签都是元素，DOM中使用 element 表示
	节点：网页中的所有内容都是节点(标签、属性、文本、注释等), DOM 中使用 node 表示
	DOM 把以上内容都看作是对象

元素
	获取元素
		根据 ID 获取元素
			语法:
				document.getElementById(id)	//获取带有 ID 的元素对象
					id 是大小写敏感的字符串
					返回的是一个元素对象
		根据标签名获取
			语法:
				父元素.getElementByTagName()	// 返回带有指定标签名的对象的集合
					返回的是元素对象的集合，以伪数组的形式存储的
					因为是集合，所以想要操作里面的元素需要遍历
					得到的元素是动态的
					如果没有这个元素，则返回空的伪数组
					父元素必须是单个对象(必须指明是哪一个元素对象)
						获取时不包括父元素自己
		根据 HTML5 新增的方法获取
			根据类名获取:
				语法:
					getElementByClassName()	//根据类名获得元素集合
			根据指定选择器获取:
				语法:
					querySelector('#box')		// 返回指定选择器的第一个元素对象
						里面的选择器需要加符号
					querySelectorAll()			// 返回指定选择器的所有元素对象集合
			
		特殊元素获取
			获取 body 元素
				document.body;				//返回 body 元素对象
			获取 html 元素
				document.documentElement	// 返回 html 元素对象


	操作元素
		改变元素内容
			element.innerText
				会去除html 标签，同时空格和换行也会去掉
				非标准
			element.innerHTML
				不会去除html标签，同时保留空格和换行
				W3C标准
		改变元素的属性 
			语法:
				元素.属性
			表单元素的属性操作
				this.disabled = true;	// 禁用
					this 指向的是事件函数的调用者
				type	//类型
				value	//值
				checked
				selected
			样式属性操作
				语法:
					element.style.属性		//行内样式操作
						属性采取驼峰命名法
						CSS权重较高
					element.className	//类名样式操作
						会直接更改元素的类名

事件
	可以被 JavaScript 检测到的行为
	简单理解:
		触发 --- 响应机制
	
	事件三要素:
		事件源
			事件被触发的对象
		事件类型
			鼠标点击(onclick)
				
		事件处理程序
			通过一个函数赋值的方式完成
		例:
			函数名.onclick = function() {
				// 执行体
			}
		执行事件的步骤:
			1.获取事件源
			2.注册事件(绑定事件)
			3.添加事件处理程序

常见的鼠标事件
	onclick			鼠标点击左键触发
	onmouseover		鼠标经过触发
	onmouseout		鼠标离开触发
	onfocus			获取鼠标焦点触发
	onblur			失去鼠标焦点触发
	onmousemove		鼠标移动触发
	onmouseup		鼠标弹起触发
	onmousedown		鼠标按下触发

属性
	获取属性
		element.属性
			获取内置属性值
		element.getAttribute('属性')
			获取自定义属性值(程序员自己定义的属性)

	设置属性值
		element.属性 = '值'
			设置内置属性值
		element.setAttribute('属性','值'); 
			主要针对自定义属性值
		HTML5 自定义属性
			自定义属性名以 data- 开头
			获取自定义属性
				element.dataset.index
				element.dataset['index']
					dataset 是一个集合，存放了所有以 data 开头的自定义属性
			
	移除属性
		element.removeAttribute('属性');
		
		
节点操作
	nodeType(节点类型)
		元素节点 nodeType 为 1	// 主要操作
		属性节点 nodeType 为 2
		文本节点 nodeType 为 3 (文本节点包括文字、空格、换行等)
	nodeName(节点名称)和nodeValue(节点值)三个基本属性构成
	
	节点层级
		父子兄层级关系
			父级节点
				node.parentNode		//最近的父级节点
					如果找不到则为 null
			子节点
				parentNode.childNodes(标准)		// 获取子节点的集合
					返回值包括了所有的子节点，如元素节点，属性节点、文本节点等
					如果需要获得里面的元素节点，就需要专门处理
					不推荐使用
				parentNode.children(非标准)
					只返回子元素节点
					是一个只读属性
					各个浏览器均支持
				parentNode.firstChild
					返回第一个子节点
					包含所有类型的节点
					找不到返回 null
				parentNode.lastChild
					返回第一个子节点
					包含所有类型的节点
				firstElementChild	// IE9以上才支持
					返回第一个子元素节点
				lastElementChild
					返回最后一个子元素节点
				实际开发写法		// 无兼容性问题
					children[0]
						返回第一个子元素节点
					children[.children.length - 1]
						返回最后一个子元素节点
			兄弟节点
				node.nextSibling
					返回当前元素的下一个兄弟节点
					包含文本节点和元素节点等
				node.previousSibling
					返回当前元素的上一个兄弟节点
					包含文本节点和元素节点等
				node.nextElementSibling			// IE9以上才支持
					下一个兄弟元素节点
				node.previousElementSibling
					上一个兄弟元素节点
	
	创建节点
		document.createElement('tagName')
			动态创建元素节点
		添加节点
			node.appendChild(child);
				node 父级
				child 子级
				添加到指定父节点的子节点列表的末尾
				类似 CSS 里的 after 伪元素
			node.insertBefore(child,指定元素)
				添加至父节点的指定子节点前面
				类似 CSS 里面的 before 伪元素
	删除节点
		node.removeChild(child)
			从 DOM 中删除一个子节点，返回删除的节点
			