Vue框架
	是一个渐进式框架,可以将Vue作为应用的一部分嵌入其中
	是一个响应式框架
	JavaScript 框架
	简化 DOM 操作
	Core+Vue-router+Vuex
	与其他前端 JS 框架的关联
		借鉴了 Angular 的 结构模板 和 数据绑定 技术
		借鉴了 React 的 组件化 和 虚拟DOM 技术
	
Vue 扩展插件
	vue-cli					脚手架
	vue-resource、axios	               ajax请求
	vue-router				路由
	vuex					状态管理
	mint-ui					基于 vue 的 UI 组件库(移动端)
	element-ui				基于 vue 的 UI 组件库(PC端)
option 选项
	el
		类型: string | HTMLElement
		语法:
			el:"选择器"	// 选择器写法类似于 jQuery的选择器
		设置 Vue 实例挂载(管理)
		用于指定当前 vue 实例 为哪个容器服务
		会管理选中的元素及其后代元素
		可以使用双标签，不能使用 HTML 和 Body
	data
		类型: Object | Function
		用于存储数据
		为容器提供数据
		可以写复杂类型的数据
			可以使用字符串、对象、数组等
			遵守 JavaScript 语法即可
		组件中 data 必须是一个函数
	methods:
		类型:{[key:string]:Function}
		作用:
			定义一些属于 Vue 的方法	// 面对对象的是方法
				可以在其他地方调用
				也可以在指令中使用

模板语法
	插值语法(双花括号表达式 / Mustache(胡子语法))
		用于解析标签体内容
		语法:
			{{xxxx}}
				xxxx会作为表达式去解析，且可以自动读取到data中的内容
        不仅可以直接写变量，也可以写简单的表达式
	指令语法(以 v- 开头的标签属性)
		用于解析标签(标签属性、标签体内容、绑定事件的回调等)
			v-text
		设置标签的文本值
		默认写法会替换全部内容
		使用插值语法可以替换指定内容
		v-html
			设置标签的 innerHTML
			内容中的 HTML标签会被解析
		v-on
			为元素绑定事件,传递自定义参数,事件修饰符
			也就是监听某个元素的事件
			绑定的方法定义在 method 属性中
			语法
				v-on:事件名="函数名"
					简写: @事件名[.修饰符]="函数名([实参1,实参2,...])"
				method:{
					函数名:function([形参1,形参2,...]){
						// 逻辑体
					}
				}
		v-show
			根据表达式的真假,切换元素的显示和隐藏
			原理是修改元素的 display
			指令后的内容最终会被解析为布尔值
			切换消耗较少
		v-if
			根据表达式的真假,切换元素的显示和隐藏
			原理是操纵 DOM 元素
			切换消耗资源较多
		v-bind
			设置元素的属性	// 例如 src、title、class
			为元素绑定属性
			语法:
				v-bind:属性名=表达式
					简写: :(冒号)属性名=表达式
		v-for
			根据数据生成列表结构
			语法:
				v-for="(item,index) in 数据"
			数组经常跟 v-for 结合使用
			数组长度更新会同步到页面上，是响应式的
		v-model
			获取和设置表单元素的值(双向数据绑定)
				更改两边的任何一边都会更改双方的值
			语法:
				v-model:value=""
			简写:
				v-model=""	// 因为默认收集 value 值

数据绑定
	单向数据绑定
		数据只能从 data 流入页面
	双向数据绑定
		页面的改变也能改变 data

MVVM 模型
	M(Model / 模型)
		对应 data 中的数据
		可以是固定的死数据、也可以是服务器中下载的数据
	V(View / 视图)
		模板代码 
		在前端中通常就是 DOM 层
		主要用于给用户展示各种信息
	VM(ViewModel / 视图模型)
		Vue 实例对象
		是 View 和 Model 沟通的桥梁
		DOM Listeners(DOM 监听)，当 DOM 发生一些事件(例如滚动、点击)时，改变对应的 Data
		实现了 Data Bindings(数据绑定)，将 Model 的改变实时的反应到 View 中

Vue 的生命周期
	也叫(hook)钩子函数
	简单理解:实例从创建到销毁的过程,销毁过程中可以做一些事情
  
